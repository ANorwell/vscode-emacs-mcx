{
		"name": "emacs-mcx",
		"displayName": "Awesome Emacs Keymap",
		"description": "Emacs Friendly Keymap with multi cursor support, improved mark-mode experience, clipboard and kill-ring integration, and lots of improvements and bug fixes.",
		"version": "0.2.0",
		"publisher": "tuttieee",
		"repository": {
				"type": "git",
				"url": "https://github.com/tuttieee/vscode-emacs-mcx"
		},
		"engines": {
				"vscode": "^1.30.0"
		},
		"categories": [
				"Other",
				"Keymaps"
		],
		"license": "MIT",
		"icon": "images/icon.png",
		"keywords": [
				"emacs",
				"keybindings",
				"multi cursor",
				"selection",
				"mark mode"
		],
		"activationEvents": [
				"*"
		],
		"main": "./out/extension.js",
		"extensionDependencies": [
				"haruhi-s.sexp"
		],
		"contributes": {
				"keybindings": [
						{
								"key": "right",
								"command": "emacs-mcx.cursorRight",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+f",
								"command": "emacs-mcx.cursorRight",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+f",
								"command": "emacs-mcx.cursorRight",
								"when": "terminalFocus"
						},
						{
								"key": "left",
								"command": "emacs-mcx.cursorLeft",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+b",
								"command": "emacs-mcx.cursorLeft",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+b",
								"command": "emacs-mcx.cursorLeft",
								"when": "terminalFocus"
						},
						{
								"key": "up",
								"command": "emacs-mcx.cursorUp",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "up",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+p",
								"command": "emacs-mcx.cursorUp",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "ctrl+p",
								"command": "emacs-mcx.cursorUp",
								"when": "terminalFocus"
						},
						{
								"key": "ctrl+p",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "down",
								"command": "emacs-mcx.cursorDown",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "down",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+n",
								"command": "emacs-mcx.cursorDown",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "ctrl+n",
								"command": "emacs-mcx.cursorDown",
								"when": "terminalFocus"
						},
						{
								"key": "ctrl+n",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "home",
								"command": "emacs-mcx.cursorHome",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+a",
								"command": "emacs-mcx.cursorHome",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+a",
								"command": "emacs-mcx.cursorHome",
								"when": "terminalFocus"
						},
						{
								"key": "end",
								"command": "emacs-mcx.cursorEnd",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+e",
								"command": "emacs-mcx.cursorEnd",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+e",
								"command": "emacs-mcx.cursorEnd",
								"when": "terminalFocus"
						},
						{
								"key": "alt+f",
								"command": "emacs-mcx.cursorWordRight",
								"when": "editorTextFocus"
						},
						{
								"key": "alt+b",
								"command": "emacs-mcx.cursorWordLeft",
								"when": "editorTextFocus"
						},
						{
								"key": "pagedown",
								"command": "emacs-mcx.cursorPageDown",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "pagedown",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+v",
								"command": "emacs-mcx.cursorPageDown",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "ctrl+v",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "pageup",
								"command": "emacs-mcx.cursorPageUp",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "pageup",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "alt+v",
								"command": "emacs-mcx.cursorPageUp",
								"when": "editorTextFocus && !suggestWidgetVisible"
						},
						{
								"key": "alt+v",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "alt+shift+.",
								"command": "emacs-mcx.cursorBottom",
								"when": "editorTextFocus"
						},
						{
								"key": "alt+shift+.",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "alt+shift+,",
								"command": "emacs-mcx.cursorTop",
								"when": "editorTextFocus"
						},
						{
								"key": "alt+shift+,",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "alt+g alt+g",
								"command": "workbench.action.gotoLine"
						},
						{
								"key": "alt+g g",
								"command": "workbench.action.gotoLine"
						},
						{
								"key": "alt+g n",
								"command": "editor.action.marker.next"
						},
						{
								"key": "alt+g alt+n",
								"command": "editor.action.marker.next"
						},
						{
								"key": "ctrl+x `",
								"command": "editor.action.marker.next"
						},
						{
								"key": "alt+g p",
								"command": "editor.action.marker.prev"
						},
						{
								"key": "alt+g alt+p",
								"command": "editor.action.marker.prev"
						},
						{
								"key": "alt+g g",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+s",
								"command": "actions.find",
								"when": "!findWidgetVisible"
						},
						{
								"key": "alt+shift+5",
								"command": "editor.action.startFindReplaceAction",
								"when": "editorFocus"
						},
						{
								"command": "editor.action.replaceOne",
								"key": "ctrl+enter",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+s",
								"command": "editor.action.nextMatchFindAction",
								"when": "findWidgetVisible"
						},
						{
								"key": "ctrl+r",
								"command": "actions.find",
								"when": "!findWidgetVisible"
						},
						{
								"key": "ctrl+r",
								"command": "editor.action.previousMatchFindAction",
								"when": "findWidgetVisible"
						},
						{
								"key": "ctrl+alt+n",
								"command": "emacs-mcx.addSelectionToNextFindMatch",
								"when": "editorFocus"
						},
						{
								"key": "ctrl+d",
								"command": "deleteRight",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+h",
								"command": "deleteLeft",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "alt+d",
								"command": "deleteWordRight",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+k",
								"command": "emacs-mcx.killLine",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+w",
								"command": "emacs-mcx.killRegion",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+w",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "alt+w",
								"command": "emacs-mcx.copyRegion",
								"when": "editorTextFocus"
						},
						{
								"key": "alt+w",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+y",
								"command": "emacs-mcx.yank",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "alt+y",
								"command": "emacs-mcx.yank-pop",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+y",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+m",
								"command": "emacs-mcx.newLine",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+j",
								"command": "emacs-mcx.newLine",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+o",
								"command": "lineBreakInsert",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+j",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+x ctrl+o",
								"command": "emacs-mcx.deleteBlankLines",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+x ctrl+o",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+x h",
								"command": "editor.action.selectAll",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+x h",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+x u",
								"command": "undo",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+x u",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+x z",
								"command": "workbench.action.toggleZenMode"
						},
						{
								"key": "ctrl+/",
								"command": "undo",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+/",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+;",
								"command": "editor.action.commentLine",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+;",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "alt+;",
								"command": "editor.action.blockComment",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "alt+;",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+l",
								"command": "emacs-mcx.recenterTopBottom",
								"when": "editorTextFocus"
						},
						{
								"key": "escape",
								"command": "emacs-mcx.cancel",
								"when": "editorTextFocus && editorHasSelection"
						},
						{
								"key": "escape",
								"command": "emacs-mcx.cancel",
								"when": "editorTextFocus && editorHasMultipleSelections"
						},
						{
								"key": "ctrl+g",
								"command": "emacs-mcx.cancel",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+g",
								"command": "closeFindWidget",
								"when": "editorFocus && findWidgetVisible"
						},
						{
								"key": "ctrl+g",
								"command": "closeReferenceSearchEditor",
								"when": "inReferenceSearchEditor && !config.editor.stablePeek"
						},
						{
								"key": "ctrl+g",
								"command": "closeReferenceSearch",
								"when": "referenceSearchVisible && !config.editor.stablePeek"
						},
						{
								"key": "ctrl+g",
								"command": "closeBreakpointWidget",
								"when": "breakpointWidgetVisible && editorFocus"
						},
						{
								"key": "ctrl+g",
								"command": "leaveSnippet",
								"when": "editorTextFocus && inSnippetMode"
						},
						{
								"key": "ctrl+g",
								"command": "closeMarkersNavigation",
								"when": "editorFocus && markersNavigationVisible"
						},
						{
								"key": "ctrl+g",
								"command": "closeParameterHints",
								"when": "editorTextFocus && parameterHintsVisible"
						},
						{
								"key": "ctrl+g",
								"command": "hideSuggestWidget",
								"when": "editorTextFocus && suggestWidgetVisible"
						},
						{
								"key": "ctrl+g",
								"command": "cancelRenameInput",
								"when": "editorFocus && renameInputVisible"
						},
						{
								"key": "ctrl+g",
								"command": "closeAccessibilityHelp",
								"when": "accessibilityHelpWidgetVisible && editorFocus"
						},
						{
								"key": "ctrl+g",
								"command": "closeReplaceInFilesWidget",
								"when": "replaceInputBoxFocus && searchViewletVisible"
						},
						{
								"key": "ctrl+g",
								"command": "workbench.action.closeMessages",
								"when": "globalMessageVisible"
						},
						{
								"key": "ctrl+g",
								"command": "workbench.action.closeQuickOpen",
								"when": "inQuickOpen"
						},
						{
								"key": "ctrl+space",
								"command": "emacs-mcx.enterMarkMode",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+x ctrl+f",
								"command": "workbench.action.quickOpen"
						},
						{
								"key": "ctrl+x ctrl+s",
								"command": "workbench.action.files.save",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+x ctrl+w",
								"command": "workbench.action.files.saveAs",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+x k",
								"command": "workbench.action.closeActiveEditor"
						},
						{
								"key": "ctrl+x ctrl-k",
								"command": "workbench.action.closeAllEditors"
						},
						{
								"key": "ctrl+x k",
								"command": "workbench.action.closeWindow",
								"when": "!editorIsOpen"
						},
						{
								"key": "ctrl+x ctrl+n",
								"command": "workbench.action.newWindow"
						},
						{
								"key": "ctrl+x 0",
								"command": "workbench.action.closeEditorsInGroup"
						},
						{
								"key": "ctrl+x 1",
								"command": "workbench.action.closeEditorsInOtherGroups"
						},
						{
								"key": "ctrl+x 2",
								"command": "workbench.action.splitEditorDown"
						},
						{
								"key": "ctrl+x 3",
								"command": "workbench.action.splitEditorRight"
						},
						{
								"key": "ctrl+x 4",
								"command": "workbench.action.toggleEditorGroupLayout"
						},
						{
								"key": "ctrl+x o",
								"command": "workbench.action.navigateEditorGroups"
						},
						{
								"key": "ctrl+p",
								"command": "showPrevParameterHint",
								"when": "editorTextFocus && parameterHintsVisible"
						},
						{
								"key": "ctrl+n",
								"command": "showNextParameterHint",
								"when": "editorTextFocus && parameterHintsVisible"
						},
						{
								"key": "ctrl+p",
								"command": "selectPrevQuickFix",
								"when": "editorFocus && quickFixWidgetVisible"
						},
						{
								"key": "ctrl+n",
								"command": "selectNextQuickFix",
								"when": "editorFocus && quickFixWidgetVisible"
						},
						{
								"key": "ctrl+p",
								"command": "selectPrevSuggestion",
								"when": "editorTextFocus && suggestWidgetVisible"
						},
						{
								"key": "ctrl+n",
								"command": "selectNextSuggestion",
								"when": "editorTextFocus && suggestWidgetVisible"
						},
						{
								"key": "ctrl+p",
								"command": "workbench.action.quickOpenNavigatePrevious",
								"when": "inQuickOpen"
						},
						{
								"key": "ctrl+n",
								"command": "workbench.action.quickOpenNavigateNext",
								"when": "inQuickOpen"
						},
						{
								"key": "ctrl+'",
								"command": "editor.action.triggerSuggest",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+'",
								"command": "toggleSuggestionDetails",
								"when": "editorTextFocus && suggestWidgetVisible"
						},
						{
								"key": "ctrl+shift+'",
								"command": "editor.action.triggerParameterHints",
								"when": "editorTextFocus"
						},
						{
								"key": "alt+x",
								"command": "workbench.action.showCommands"
						},
						{
								"key": "ctrl+alt+space",
								"command": "workbench.action.toggleSidebarVisibility"
						},
						{
								"key": "ctrl+x b",
								"command": "workbench.action.showAllEditors"
						},
						{
								"key": "ctrl+shift+backspace",
								"command": "emacs-mcx.killWholeLine",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+x ctrl+l",
								"command": "emacs-mcx.transformToLowercase",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "alt+l",
								"command": "emacs-mcx.transformToLowercase",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+x ctrl+u",
								"command": "emacs-mcx.transformToUppercase",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "alt+u",
								"command": "emacs-mcx.transformToUppercase",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "alt+backspace",
								"command": "deleteWordLeft",
								"when": "editorTextFocus && !editorReadonly"
						},
						{
								"key": "ctrl+alt+f",
								"command": "sexp.moveForward",
								"when": "editorTextFocus"
						},
						{
								"key": "ctrl+alt+b",
								"command": "sexp.moveBackward",
								"when": "editorTextFocus"
						},
						{
								"command": "sexp.barf",
								"key": "ctrl+alt+shift+space",
								"when": "editorTextFocus"
						},
						{
								"command": "sexp.slurp",
								"key": "ctrl+alt+space",
								"when": "editorTextFocus"
						}
				]
		},
		"scripts": {
				"vscode:prepublish": "yarn run compile",
				"compile": "tsc -p ./",
				"watch": "tsc -watch -p ./",
				"postinstall": "node ./node_modules/vscode/bin/install",
				"test": "yarn run compile && node ./node_modules/vscode/bin/test"
		},
		"devDependencies": {
				"@types/mocha": "^2.2.42",
				"@types/node": "^8.10.25",
				"tslint": "^5.8.0",
				"typescript": "^3.1.4",
				"vscode": "^1.1.25"
		},
		"dependencies": {
				"@types/clipboardy": "^1.1.0",
				"clipboardy": "^1.2.3"
		}
}
